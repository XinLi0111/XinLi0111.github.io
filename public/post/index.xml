<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Articles on Li, Xin&#39;s Blog | Homepage</title>
    <link>https://xinli0111.gitee.io/post/</link>
    <description>Recent content in Articles on Li, Xin&#39;s Blog | Homepage</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Thu, 02 Mar 2017 12:00:00 -0500</lastBuildDate>
    
	<atom:link href="https://xinli0111.gitee.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Idba_ud拼接昆虫线粒体全基因组脚本</title>
      <link>https://xinli0111.gitee.io/post/idba_ud%E6%8B%BC%E6%8E%A5%E6%98%86%E8%99%AB%E7%BA%BF%E7%B2%92%E4%BD%93%E5%85%A8%E5%9F%BA%E5%9B%A0%E7%BB%84%E8%84%9A%E6%9C%AC/</link>
      <pubDate>Sat, 04 Apr 2020 18:38:14 +0800</pubDate>
      
      <guid>https://xinli0111.gitee.io/post/idba_ud%E6%8B%BC%E6%8E%A5%E6%98%86%E8%99%AB%E7%BA%BF%E7%B2%92%E4%BD%93%E5%85%A8%E5%9F%BA%E5%9B%A0%E7%BB%84%E8%84%9A%E6%9C%AC/</guid>
      <description>idba_ud 是一个可以针对不同测序深度的短reads的基于交互式De Bruijin作图的从头拼接软件。他从小的k-mer开始到大的的k-mer步步前进，设定阈值，短的和低深度的contigs被删掉，这样来完成低深度和高深度的拼接。 拼接之前需要对原始下机数据进行清洗质控。 拼接后需要使用诱饵序列调取最终的拼接结果，所以这里将拼接过程和调取脚本合并于同一个脚本中。
 1. fastp质控  通常来说，二代测序公司返回的测序数据为clean data，即经过去除低质量测序数据后的数据。目前有公司已经不再返回clean data，而是直接返回下机数据raw data。这里将这一步也加入处理流程中。 生物信息中，一旦涉及到 fastq 数据的处理，通常都要消耗大量内存、CPU 和时间。从 fastq 文件中随机抽取数据。使用的工具是 seqtk，详细安装教程：http://www.genek.tv/article/28
  使用fastp软件。   它可以仅仅扫描 FASTQ 文件一次，就完成比FASTQC + cutadapt + Trimmomatic 这三个软件加起来还多很多的功能，而且速度上比仅仅使用 Trimmomatic 一个软件还要快 3 倍左右，因为它使用 C++开发，处处使用了高效算法，而且完美支持多线程！
 安装 安装 fastp 十分简单，如果你使用的是 Linux 系统，可以直接使用网站上提供的预编译好的版本，下载地址是http://opengene.org/fastp/fastp，可以使用 wget等命令进行下载，下载了之后记得使用 chmod a+x ./fastp 增加该文件的可执行权限，然后就可以使用了。也可以从源代码进行编译，需要使用 git 工具或者直接在网页上下载 release 的 源代码，以 git 下载最新的代码为例：git clone https://github.com/OpenGene/fastp.git cd fastp make sudo make install 使用 fastp -i in.</description>
    </item>
    
    <item>
      <title>Snakemake创建idba拼接流程</title>
      <link>https://xinli0111.gitee.io/post/snakemake%E5%88%9B%E5%BB%BAidba%E6%8B%BC%E6%8E%A5%E6%B5%81%E7%A8%8B/</link>
      <pubDate>Sat, 04 Apr 2020 18:14:11 +0800</pubDate>
      
      <guid>https://xinli0111.gitee.io/post/snakemake%E5%88%9B%E5%BB%BAidba%E6%8B%BC%E6%8E%A5%E6%B5%81%E7%A8%8B/</guid>
      <description>上一篇文章中说到了自己写脚本创建的idba流程，但是在工作流程方面是有一些专门的软件存在。比如Next flow以及snakemake等，因为snakemake是以Python语言为主要书写语言，因此学习了snakemake。
 snakemake简介 snakemake是一个创建流程的工具，其最主要的部分就是一个个**&amp;ldquo;rule&amp;rdquo;**，一个rule就是一系列流程中的最基础的一步。每个rule简单来说就相当于一个shell脚本，主要由 input 、output 、shell 3个部分构成。多个rule之间由它们的 input 、 output 相互关系决定执行顺序。上一步的结果文件是下一步运行的条件。
#这是一个简单的snakemake rule示例，将两个文件合并为一个文件 rule concat: input: expand(&amp;#34;{file}.txt&amp;#34;, file=[&amp;#34;hello&amp;#34;, &amp;#34;world&amp;#34;]) output: &amp;#34;merge.txt&amp;#34; shell: &amp;#34;cat {input} &amp;gt; {output}&amp;#34; snakemake安装 之前尝试过自己安装snakemake，但是遇到了不知名错误，在手机上使用termux安装并无异常。查阅报错信息和官方指导后，建议使用官方提供的方法：使用conda直接创建新环境安装 conda create -c bioconda -c conda-forge -n snakemake snakemake ，自己新建环境再安装snakemake遭遇了依赖无法解决的情况，不知道是最近版本问题还是一直都有问题。
激活snakemake环境 上一步已经安装好了新的conda环境——snakemake，在终端中使用 conda activate snakemake 激活snakemake环境。
snakemake参数简介 snakemake的参数还挺多的，具体的请参阅官方文档，这里仅作简介。
--snakefile, -s 指定Snakefile，否则是当前目录下的Snakefile --dryrun, -n 不真正执行，一般用来查看Snakefile是否有错 --printshellcmds, -p 输出要执行的shell命令 --reason, -r 输出每条rule执行的原因,默认FALSE --cores, --jobs, -j 指定运行的核数，若不指定，则使用最大的核数 --force, -f 重新运行第一条rule或指定的rule --forceall, -F 重新运行所有的rule，不管是否已经有输出结果 --forcerun, -R 重新执行Snakefile，当更新了rule时候使用此命令 #一些可视化命令 $ snakemake --dag | dot -Tsvg &amp;gt; dag.</description>
    </item>
    
  </channel>
</rss>